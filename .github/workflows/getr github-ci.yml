name: CI/CD Pipeline for Dockerized App

on:
  push:
    branches:
      - main  # Trigger on push to the main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code from the repository
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up Docker Buildx (for multi-platform builds)
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Step 3: Set up AWS credentials (for ECR login)
    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1  # Replace with your AWS region

    # Step 4: Log in to Amazon ECR
    - name: Log in to Amazon ECR
      uses: docker/login-action@v2
      with:
        registry: ${{ secrets.AWS_ECR_REGISTRY_URL }}  # ECR registry URL (e.g., 123456789012.dkr.ecr.us-east-1.amazonaws.com)
        username: AWS
        password: ${{ secrets.AWS_ECR_AUTH_TOKEN }}  # This is generated by AWS CLI or GitHub Action itself

    # Step 5: Build the Docker image
    - name: Build Docker image
      run: |
        docker build -t myapp:latest .

    # Step 6: Tag the image for ECR
    - name: Tag Docker image for ECR
      run: |
        docker tag myapp:latest ${{ secrets.AWS_ECR_REGISTRY_URL }}/myapp:latest

    # Step 7: Push the Docker image to ECR
    - name: Push Docker image to ECR
      run: |
        docker push ${{ secrets.AWS_ECR_REGISTRY_URL }}/myapp:latest

    # Step 8: SSH into EC2 and deploy the Docker container
    - name: Deploy Docker container on EC2
      env:
        HOST: ${{ secrets.EC2_HOST }}
        USERNAME: ${{ secrets.EC2_USERNAME }}
        PASSWORD: ${{ secrets.EC2_PASSWORD }}
      run: |
        sshpass -p "$PASSWORD" ssh -o StrictHostKeyChecking=no $USERNAME@$HOST << EOF
        cd /path/to/your/project
        docker pull ${{ secrets.AWS_ECR_REGISTRY_URL }}/myapp:latest || true
        docker stop myapp || true
        docker rm myapp || true
        docker run -d --name myapp -p 80:80 ${{ secrets.AWS_ECR_REGISTRY_URL }}/myapp:latest
        EOF
